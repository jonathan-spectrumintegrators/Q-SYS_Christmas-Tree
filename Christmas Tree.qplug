--[[
    Control state feedback plugin (Christmas tree)
    Copyright (C) 2024 Jonathan Dean - Spectrum Integrators (jonathand@spectrumintegrators.com)

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

Shows LED feedback of controls referenced during runtime by Component ID and control name

USAGE:

Set the ID field to the component ID and control name that you'd like to monitor, in the format COMPONENT.CONTROL
The name is split on the first period, so the component ID can not contain a period but the control name can.
Spaces are allowed and left in as-is. Remember everything is case-sensitive.
Components must have Script Access set to at least Script.

Trigger-style controls will turn the associated LED on for a brief period then off again.
These include Trigger, Text, Array/Enum.
If the trigger is executed before the LED turns off, the second trigger will not re-start the timer.
The Trigger Feedback Time property sets how long the LED will remain on for Trigger control feedback.

Other controls will set the LED based on the control's Boolean value. See the Q-SYS help to learn more about
what the Boolean property is for controls that aren't on/off (such as text fields and knobs).

If a component or control referenced doesn't exist or is inaccessible, the LED for that line will be marked
as indeterminate (or if no name is specified)

]]--


--[[ DEBUG LEVELS ]] --
-- Verbosity levels for debugging
DebugLevels = {"None", "Debugging", "Function Calls", "All"}
DebugLevelNone = DebugLevels[1] -- Does not print any debug data
DebugLevelDebugging = DebugLevels[2] -- Prints debugging messages
DebugLevelFunctionCalls = DebugLevels[3] -- Prints function call notifications
DebugLevelAll = DebugLevels[4] -- Prints both function call notifications and debugging messages

--[[ PLUGIN DATA ]] --
PluginInfo = {
    Name = "Christmas Tree",
    Version = "1.0",
    BuildVersion = "1.0.0.0",
    Id = "a3656542-f05f-467a-ac24-9a49b243a1fc",
    Author = "Jonathan Dean (Spectrum Integrators jonathand@spectrumintegrators.com)",
    Description = "Control state feedback",
    Manufacturer = "Generic",
    Model = "Various"
}
PageNames = {"Controls"} -- List the pages within the plugin

--[[ DEBUGGING FUNCTIONS ]] --

-- Return a comma-separated string list from an arbitrary number of inputs
function BuildStringList(...)
    local args = {...}
    if #args == 0 then
        -- no items given, quit early
        return ""
    end
    local ret = ""
    -- Go through all but the last item in the list
    for i = 1, #args - 1 do
        -- Add the next element to the list (with a comma since we know it's not the last item)
        ret = string.format("%s%s, ", ret, tostring(args[i]))
    end
    -- Add the final element to the list (no comma because it's the last item)
    ret = string.format("%s%s", ret, tostring(args[#args]))
    return ret
end

-- Print a debug message
function DBG(msg, ...)
    local args = {...}
    if Properties["Debug Print"].Value == DebugLevelAll or Properties["Debug Print"].Value == DebugLevelDebugging then
        print("DEBUG: " .. msg .. " " .. BuildStringList(...))
    end
end

-- Print a function call message
function FUNC(msg, ...)
    local args = {...}
    if Properties["Debug Print"].Value == DebugLevelAll or Properties["Debug Print"].Value == DebugLevelFunctionCalls then
        print(" FUNC: " .. msg .. " " .. BuildStringList(...))
    end
end

-- Print an error message (but don't throw an actual error)
function ERR(msg, ...)
    local args = {...}
    print("\aERROR: " .. msg .. " " .. BuildStringList(...))
end

--[[ PLUGIN SETUP ]] --

-- Define the color of the plugin object in the design
function GetColor(props)
    return {0, 139, 139}
end

-- The name that will initially display when dragged into a design
function GetPrettyName(props)
    return PluginInfo.Name
end

-- Returns an ordered table of the page names
function GetPages(props)
    local pages = {}
    for ix, name in ipairs(PageNames) do
        table.insert(pages, {
            name = PageNames[ix]
        })
    end
    return pages
end

-- Define User configurable Properties of the plugin
function GetProperties()
    local props = {}
    -- Add debug verbosity property
    table.insert(props, {
        Name = "Debug Print",
        Type = "enum",
        Choices = DebugLevels,
        Value = DebugLevelNone,
        Comment = "Debug verbosity level"
    })
    table.insert(props, {
        Name = "Count",
        Type = "integer",
        Min = 1,
        Max = 100,
        Value = 5,
        Comment = "The number of controls to monitor"
    })
    table.insert(props, {
        Name = "Trigger Feedback Time",
        Type = "double",
        Min = 0,
        Max = 300,
        Value = 1.5,
        Comment = "The number of seconds to light the LED when a trigger-type event occurrs"
    })
    return props
end

-- Optional function to define pins on the plugin that are not connected to a Control
function GetPins(props)
    local pins = {}
    return pins
end

-- Optional function to update available properties when properties are altered by the user
function RectifyProperties(props)
    if props.plugin_show_debug.Value == false then
        -- Don't show debug verbosity if debugging is disabled
        props["Debug Print"].IsHidden = true
        props["Debug Print"].Value = DebugLevelNone
    else
        -- Show debug verbosity when debugging is enabled
        props["Debug Print"].IsHidden = false
    end
    return props
end

-- Optional function to define components used within the plugin
function GetComponents(props)
    -- No components used here
    local components = {}
    return components
end

-- Optional function to define wiring of components used within the plugin
function GetWiring(props)
    -- No wiring used here
    local wiring = {}
    return wiring
end

--[[ CONTROLS ]] --

function GetControls(props)
    local ctrls = {}
    table.insert(ctrls, {
        Name = "ID",
        ControlType = "Text",
        Count = tonumber(props["Count"].Value),
        UserPin = false
    })
    table.insert(ctrls, {
        Name = "State",
        ControlType = "Indicator",
        IndicatorType = "LED",
        Count = tonumber(props["Count"].Value),
        UserPin = false
    })
    return ctrls
end

--[[ CONTROL LAYOUT ]] --

function GetControlLayout(props)
    local layout = {}
    local graphics = {}
    local CurrentPage = PageNames[props["page_index"].Value]
    local rowHeight = 16
    local gapSize = 4
    local margin = 4
    local labelWidth = 40
    local textBoxWidth = 120
    local ledSize = 16

    if CurrentPage == "Controls" then
        for i = 1, tonumber(props["Count"].Value) do
            table.insert(graphics, {
                Type = "Text",
                Text = string.format("% 4d:", i),
                Position = {margin, margin + (rowHeight + gapSize) * (i - 1)},
                Size = {labelWidth, rowHeight}
            })
            layout["ID " .. tostring(i)] = {
                Style = "Text",
                Position = {margin + labelWidth + 2 * gapSize, margin + (rowHeight + gapSize) * (i - 1)},
                Size = {textBoxWidth, rowHeight}
            }
            layout["State " .. tostring(i)] = {
                Style = "Led",
                Position = {margin + labelWidth + textBoxWidth + 3 * gapSize, margin + (rowHeight + gapSize) * (i - 1)},
                Size = {ledSize, ledSize}
            }

        end
    end

    return layout, graphics
end

--[[ RUNTIME CODE ]] --

if not Controls then
    goto nocontrols
end

-- Reference to all connected controls so if we get disconnected later we can remove ourselves from their EventHandlers
connectedControls = {}

-- These are the types of controls that will be set to use the Trigger event handler
triggerControls = "Trigger;Text;Enum;Array"

-- Called when a subscribed Trigger control is triggered
-- Sets the LED on and then turns it off after a specified timeout period
function TriggerHandler(i, componentname, controlname, ctl)
    FUNC("TriggerHandler", i, componentname, controlname)
    Controls["State"][i].Boolean = true
    Timer.CallAfter(function()
        Controls["State"][i].Boolean = false
    end, tonumber(Properties["Trigger Feedback Time"].Value))
end

-- Called when a non-Trigger subscribed control's value changes
-- Sets the LED based on the Boolean property (the meaning of which depends on the type of control)
function ValueHandler(i, componentname, controlname, ctl)
    FUNC("ValueHandler", i, componentname, controlname, ctl.Boolean)
    Controls["State"][i].Boolean = ctl.Boolean
end

-- Split the given string on the first period character and return both the left and right halves
-- returns nil if no period is found
function SplitControlName(ctlname)
    FUNC("SplitControlName", ctlname)
    local dotat = ctlname:find("%.")
    if dotat ~= nil and dotat > 0 then
        return ctlname:sub(1, dotat - 1), ctlname:sub(dotat + 1)
    end
end

function ConnectToControls()
    FUNC("ConnectToControls")
    -- first, disconnect any existing event handlers, clear the list, and turn off the LEDs
    for _, ctl in ipairs(connectedControls) do
        if ctl ~= false then
            ctl.EventHandler = nil
        end
    end
    connectedControls = {}
    for i = 1, tonumber(Properties["Count"].Value) do
        -- we set these to false because we need the elements to be non-nil for ipairs to work
        connectedControls[i] = false
        Controls["State"][i].Boolean = false
        Controls["State"][i].IsIndeterminate = true --Set them all as indeterminate by default
    end

    for i = 1, tonumber(Properties["Count"].Value) do
        -- the i here is not only the control index but it's also the index into the connectedControls array
        ctlID = Controls["ID"][i]

        -- Make sure there's something specified for the component and control
        if ctlID.String == "" then
            goto nextloop
        end

        -- Separate the component name and the control name and make sure it's valid
        local componentname, controlname = SplitControlName(ctlID.String)
        if componentname == nil then
            ERR("Invalid component & control name:", ctlID.String)
            goto nextloop
        end

        -- we don't pcall this because Component.New always returns a component object
        component = Component.New(componentname)
        -- We do this nonsense to validate that the component returned by Component.New is actually a valid component
        local x, y, z = pairs(component)
        if not pcall(x, y, z) then
            ERR("Component does not exist or is not accessible:", componentname)
            goto nextloop
        end

        -- Make sure the control exists on the component
        if component[controlname] == nil or component[controlname].Type == nil then
            ERR(string.format("Control does not exist on component %s:", componentname), controlname)
            goto nextloop
        end

        local ctl = component[controlname] -- short-named variable so I don't have to keep typing all that long name out
        DBG(string.format("Found control %s in component %s, it is type %s", controlname, componentname, ctl.Type))

        -- Add the control to our list of handled controls
        connectedControls[i] = ctl

        -- Attach the appropriate event handler to the control
        if triggerControls:find(ctl.Type) then
            DBG(string.format("Adding trigger handler to %s", ctlID.String))
            ctl.EventHandler = function()
                TriggerHandler(i, componentname, controlname, ctl)
            end
        else
            Controls["State"][i].Boolean = ctl.Boolean
            DBG(string.format("Adding value handler to %s", ctlID.String))
            ctl.EventHandler = function()
                ValueHandler(i, componentname, controlname, ctl)
            end
        end
        
        Controls["State"][i].IsIndeterminate = false --If we got here, we know everything is OK and we can mark the control as real

        ::nextloop:: -- goto label for when a loop needs to be continued early
    end
end

-- add event handlers to each ID control
for i, ctl in pairs(Controls["ID"]) do
    ctl.EventHandler = ConnectToControls
end

-- Do all the stuff when the script furst runs
ConnectToControls()

::nocontrols::
